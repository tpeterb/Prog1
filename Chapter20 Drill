#include <iostream>
#include <vector>
#include <list>
#include <algorithm>

//6. feladat:
template<typename Iter1, typename Iter2>
Iter2 copy2(Iter1 f1, Iter1 e1, Iter2 f2)
{
    while (f1 != e1)
    {
        *f2 = *f1;
        f1++;
        f2++;
    }
    return f2;
}
int main()
{
    //1. feladat:
    int arr[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

    //2. feladat:
    std::vector<int> v{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

    //3. feladat:
    std::list<int> l{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

    //4. feladat:
    int arr2[10];
    std::copy(arr, arr + 10, arr2);
    std::vector<int> v2 = v;
    std::list<int> l2 = l;

    //5. feladat:
    for (int i = 0; i < 10; i++)
    {
        arr[i] += 2;
    }
    for (std::vector<int>::iterator it = v.begin(); it != v.end(); it++)
    {
        *it += 3;
    }
    for (std::list<int>::iterator it = l.begin(); it != l.end(); it++)
    {
        *it += 5;
    }
        
    //7. feladat:
    copy2(arr, arr+10, v.begin());
    copy2(l.begin(), l.end(), arr);

    //8. feladat:
    std::vector<int>::iterator it = std::find(v.begin(), v.end(), 3);
    if(it != v.end()) 
    {
        std::cout << std::distance(v.begin(), it) << std::endl;
    }
    std::list<int>::iterator it2 = std::find(l.begin(), l.end(), 27);
    if(it2 != l.end()) 
    {
        std::cout << std::distance(l.begin(), it2) << std::endl;
    }
    return 0;
}
